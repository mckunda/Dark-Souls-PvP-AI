use crate::ai::gui::LocationDetection;
use crate::ai::{back_to_enum, guiPrint};
back_to_enum! {
    pub enum AnimationTypes {
        Nothing = 0,
        EatItem = 1,
        CrushUseItem = 15,
        EstusSwig_part1 = 16,
        EstusSwig_part2 = 18,
        EstusSwig_part3 = 19,
        CouldntUse = 21,
        DragonBreathStart = 26,
        DragonBreathFire = 27,
        DragonBreathEnd = 28,
        DragonRoar = 29,
        Roll_1H = 32,
        RollBackwards_1H = 33,
        RollRight_1H = 34,
        RollLeft_1H = 35,
        Backstep_1H = 38,
        RollingAttack_1H = 41,
        ShieldPoke = 45,
        R1_1H = 46,
        R1_1H_Combo1 = 48,
        R1_1H_Combo2 = 49,
        Kick_1H = 52,
        Jumping_1H = 53,
        LeftHandAttack = 55,
        Backstep_Attack_1H = 59,
        Backstep_Attack_2H = 60,
        Bow_Draw_2H = 65,
        Bow_Hold = 66,
        Bow_Release_2H = 67,
        Crossbow_Recover_2H = 68,
        Crossbow_Draw_1H = 69,
        Crossbow_Release_1H = 70,
        Crossbow_Recover_1H = 71,
        ShieldRaise_walking = 75,
        ShieldRaise = 76,
        Shield_Held_Up = 77,
        Shield_Lower = 78,
        Shield_Lower_walking = 79,
        Shield_Held_Up_walking_Start = 80,
        Shield_Held_Up_walking = 81,
        Parry = 86,
        R1_1H_into_R2 = 88,
        R2_1H = 89,
        R2_1H_Combo1 = 90,
        Roll_2H = 94,
        RollBackwards_2H = 95,
        RollRight_2H = 96,
        RollLeft_2H = 97,
        Backstep_2H = 100,
        RollingAttack_2H = 103,
        R1_2H = 107,
        R1_2H_just2Handed = 108,
        R1_2H_Combo1 = 109,
        R1_2H_Combo2 = 110,
        Kick_2H = 112,
        Jumping_2H = 113,
        R1_2H_into_R2 = 114,
        R2_2H = 115,
        R2_2H_Combo1 = 116,
        FireSurge_Windup_LH = 135,
        FireSurge_Cast_LH = 136,
        FireSurge_Recover_LH = 137,
        FireSurge_Windup_RH = 138,
        FireSurge_Cast_RH = 139,
        FireSurge_Recover_RH = 140,
        Miricle_Projectile_Windup = 143,
        Miricle_Projectile_Cast = 144,
        Miricle_AOE_Windup = 145,
        Miricle_AOE_Cast = 146,
        Miricle_Throw_Windup = 147,
        Miricle_Throw_Cast = 148,
        Miricle_Ground_Windup = 155,
        Miricle_Ground_Cast = 156,
        Magic_Cast_Windup = 157,
        Magic_Cast_Cast = 158,
        Magic_Homing_Windup = 159,
        Magic_Homing_Ready = 160,
        FireWhip_Windup = 161,
        FireWhip_Cast = 162,
        FireStorm_Windup = 163,
        FireStorm_Cast = 164,
        Combustion_Windup = 167,
        Combustion_Cast = 168,
        FireBall_Windup = 173,
        FireBall_Cast = 174,
        OneHandWeapon_part1 = 185,
        OneHandWeaponfromShield_part1 = 186,
        OneHandWeapon_part2 = 188,
        OneHandWeaponfromShield_part2 = 189,
        TwoHandWeapon_part1 = 199,
        TwoHandWeaponfromShield_part1 = 200,
        TwoHandWeapon_part2 = 203,
        Toggle_R_Weapon_part1 = 209,
        Toggle_R_Weapon_part2 = 213,
        Toggle_L_Weapon_part1 = 217,
        Toggle_L_Weapon_part2 = 221,
        Backstab = 225,
    }
}

pub struct AnimationCombineReturn {
    pub animationId: i32,
    pub partNumber: u8, //0 if 1st part of combined animation, 1 if second
}

/*determine what type of action the animation id is.
i cant seem to find a pattern in the ids, so this is just a big switch statement
ranged attacks use a different format: they have a specific animation for windup,recover, and hurtbox creation; while others rely on a subanimation id to determine windup, hurtbox, and recovery.
because of this, have to specify if we need to look at subanimation
0 is not attack animation
1 is windup to attack
2 is attack id but must check subanimation(hurtbox not instantly generated)
3 is hurtbox is created
4 is same as 2 but override behind enemy safety
5 is only used with character struct for animation combination
*/
pub fn isAttackAnimation(animationType_id: u8) -> u8 {
    match animationType_id.try_into() {
        Ok(AnimationTypes::DragonBreathFire) => 2,
        Ok(AnimationTypes::DragonRoar) => 2,
        Ok(AnimationTypes::RollingAttack_1H) => 2,
        Ok(AnimationTypes::ShieldPoke) => 2,
        Ok(AnimationTypes::R1_1H) => 2,
        Ok(AnimationTypes::R1_1H_Combo1) => 2,
        Ok(AnimationTypes::R1_1H_Combo2) => 2,
        Ok(AnimationTypes::Kick_1H) => 2,
        Ok(AnimationTypes::Jumping_1H) => 2,
        Ok(AnimationTypes::LeftHandAttack) => 2,
        Ok(AnimationTypes::Backstep_Attack_1H) => 2,
        Ok(AnimationTypes::Backstep_Attack_2H) => 2,
        Ok(AnimationTypes::Bow_Release_2H) => 3,
        Ok(AnimationTypes::Crossbow_Release_1H) => 3,
        Ok(AnimationTypes::R1_1H_into_R2) => 2,
        Ok(AnimationTypes::R2_1H) => 2,
        Ok(AnimationTypes::R2_1H_Combo1) => 2,
        Ok(AnimationTypes::RollingAttack_2H) => 2,
        Ok(AnimationTypes::R1_2H) => 2,
        Ok(AnimationTypes::R1_2H_just2Handed) => 2,
        Ok(AnimationTypes::R1_2H_Combo1) => 2,
        Ok(AnimationTypes::R1_2H_Combo2) => 2,
        Ok(AnimationTypes::Kick_2H) => 2,
        Ok(AnimationTypes::Jumping_2H) => 2,
        Ok(AnimationTypes::R1_2H_into_R2) => 2,
        Ok(AnimationTypes::R2_2H) => 2,
        Ok(AnimationTypes::R2_2H_Combo1) => 2,
        Ok(AnimationTypes::FireSurge_Cast_LH) => 2,
        Ok(AnimationTypes::FireSurge_Cast_RH) => 2,
        Ok(AnimationTypes::Miricle_Projectile_Cast) => 2,
        Ok(AnimationTypes::Miricle_AOE_Windup) => 4,
        Ok(AnimationTypes::Miricle_AOE_Cast) => 5,
        Ok(AnimationTypes::Miricle_Throw_Cast) => 3,
        Ok(AnimationTypes::Miricle_Ground_Cast) => 3,
        Ok(AnimationTypes::Magic_Cast_Cast) => 3,
        Ok(AnimationTypes::FireWhip_Cast) => 2,
        Ok(AnimationTypes::FireStorm_Cast) => 3,
        Ok(AnimationTypes::Combustion_Windup) => 2,
        Ok(AnimationTypes::Combustion_Cast) => 5,
        Ok(AnimationTypes::FireBall_Windup) => 1,
        Ok(AnimationTypes::FireBall_Cast) => 3,
        _ => 0,
    }
}


pub fn isDodgeAnimation(animationType_id: u16) -> bool {
    match animationType_id.try_into() {
        Ok(AnimationTypes::Roll_1H) => true,
        Ok(AnimationTypes::RollBackwards_1H) => true,
        Ok(AnimationTypes::RollRight_1H) => true,
        Ok(AnimationTypes::RollLeft_1H) => true,
        Ok(AnimationTypes::Backstep_1H) => true,
        Ok(AnimationTypes::Roll_2H) => true,
        Ok(AnimationTypes::RollBackwards_2H) => true,
        Ok(AnimationTypes::RollRight_2H) => true,
        Ok(AnimationTypes::RollLeft_2H) => true,
        Ok(AnimationTypes::Backstep_2H) => true,
        _ => false,
    }
}

pub fn isVulnerableAnimation(animation_id: i32) -> u8 {
    match animation_id {
        //shield break heavy
        164 => 1,
        //shield break medium
        162 => 1,
        //shield break light
        160 => 1,
        //estus chug 1
        7585 => 1,
        //estus chug 2
        7586 => 1,
        //estus chug 3
        7587 => 1,
        //out of casts
        6299 => 1,
        //use item
        7500 => 1,
        //use humanity
        7501 => 1,
        //could not use
        7510 => 1,
        //throw
        7550 => 0,
        _ => 0,
    }
}

//HAHA! TIME FOR JANK!
//If the given animation is in this list, add up the two animation timers.
//NOTE:this requires the part 0 animation to be using timer 2, and the part 1 using timer 1
pub fn CombineLastAnimation(animation_id: i32, ret: &mut AnimationCombineReturn) {
    match animation_id {
        //l hand combustion cast
        6207 => {
            ret.animationId = 6407;
            ret.partNumber = 0;
        }

        6407 => {
            ret.animationId = 6407;
            ret.partNumber = 1;
        }
        //r hand combustion cast
        6307 => {
            ret.animationId = 6507;
            ret.partNumber = 0;
        }
        6507 => {
            ret.animationId = 6507;
            ret.partNumber = 1;
        }
        //l hand wog cast
        6222 => {
            ret.animationId = 6422;
            ret.partNumber = 0;
        }
        6422 => {
            ret.animationId = 6422;
            ret.partNumber = 1;
        }
        //r hand wog cast
        6322 => {
            ret.animationId = 6522;
            ret.partNumber = 0;
        }
        6522 => {
            ret.animationId = 6522;
            ret.partNumber = 1;
        }
        _ => {
            ret.animationId = 0;
            ret.partNumber = 0;
        }
    }
}


pub fn dodgeTimings(animation_id: i32) -> f32 {
    match animation_id {
        100 => 0.5, //catch all for all kicks
        6407 => 0.65, //combined version of two combustion animations
        6507 => 0.65, //rhand of above
        6422 => 0.7, //combined version of two wog animations
        6522 => 0.7, //rhand of above
        6517 => 1.1,
        203000 => 0.25,
        203001 => 0.229667,
        203002 => 0.324,
        203300 => 0.427,
        203310 => 0.426,
        203500 => 0.529,
        203900 => 0.2,
        204000 => 0.3,
        204001 => 0.222,
        204002 => 0.324,
        204300 => 0.392,
        204310 => 0.409,
        204500 => 0.528,
        204600 => 0.8,
        204900 => 0.133,
        233000 => 0.51,
        233001 => 0.442,
        233002 => 0.442,
        233300 => 0.714,
        233301 => 0.720937,
        233310 => 0.34,
        233500 => 0.51,
        233900 => 2.494666,
        234000 => 0.529333,
        234001 => 0.476,
        234002 => 0.51,
        234300 => 0.578,
        234310 => 0.51,
        234500 => 0.544,
        234900 => 0.23,
        253000 => 0.648,
        253001 => 0.588,
        253002 => 0.652,
        253300 => 0.896,
        253310 => 0.796,
        253500 => 0.588,
        253600 => 1.,
        253900 => 0.43,
        254000 => 0.588,
        254001 => 0.632,
        254002 => 0.592,
        254100 => 3.332664,
        254300 => 0.732,
        254310 => 0.896,
        254500 => 0.592,
        254600 => 1.,
        254900 => 0.5,
        263000 => 0.956,
        263001 => 0.864,
        263002 => 0.96,
        263300 => 0.912,
        263301 => 0.91175,
        263310 => 0.912,
        263500 => 0.648,
        263900 => 2.999999,
        264000 => 0.744,
        264001 => 0.744,
        264002 => 0.744,
        264300 => 0.912,
        264301 => 0.9135,
        264310 => 0.912,
        264500 => 0.696,
        264900 => 0.55,
        273000 => 0.450292,
        273001 => 0.383688,
        273002 => 0.384479,
        273010 => 0.354604,
        273300 => 0.550417,
        273301 => 0.551042,
        273310 => 0.483938,
        273900 => 0.263646,
        274000 => 0.450688,
        274001 => 0.383771,
        274002 => 0.450625,
        274300 => 0.550542,
        274301 => 0.550583,
        274310 => 0.550583,
        274900 => 0.250375,
        283000 => 0.450458,
        283001 => 0.417208,
        283002 => 0.450229,
        283300 => 1.0185,
        283301 => 1.017417,
        283310 => 0.68375,
        283500 => 0.483813,
        283900 => 0.383917,
        284000 => 0.35075,
        284001 => 0.316938,
        284002 => 0.350521,
        284300 => 0.852125,
        284301 => 0.851313,
        284310 => 0.550521,
        284500 => 0.484021,
        284900 => 0.416896,
        293000 => 0.418792,
        293001 => 0.483833,
        293002 => 0.417313,
        293300 => 0.784125,
        293301 => 0.784625,
        293310 => 0.784375,
        293500 => 0.417063,
        293900 => 0.216833,
        294000 => 0.417438,
        294001 => 0.484417,
        294002 => 0.41725,
        294300 => 1.018042,
        294301 => 1.018271,
        294310 => 1.017812,
        294500 => 0.4,
        294900 => 0.250146,
        303000 => 0.617792,
        303001 => 0.617708,
        303002 => 0.617333,
        303040 => 0.701208,
        303041 => 0.701042,
        303042 => 0.700667,
        303300 => 0.817458,
        303301 => 0.817708,
        303310 => 0.850416,
        303500 => 0.617,
        303540 => 0.700333,
        303900 => 0.485209,
        304000 => 0.617917,
        304001 => 0.617708,
        304002 => 0.617708,
        304040 => 0.701417,
        304041 => 0.701125,
        304042 => 0.701333,
        304300 => 0.818542,
        304301 => 0.818542,
        304310 => 0.751167,
        304500 => 0.617458,
        304900 => 0.484084,
        323000 => 0.851458,
        323001 => 0.85175,
        323002 => 0.852666,
        323300 => 1.186041,
        323301 => 1.186416,
        323310 => 1.1855,
        323500 => 0.78425,
        323900 => 0.585625,
        324000 => 0.851542,
        324001 => 0.851,
        324002 => 0.851167,
        324300 => 1.18525,
        324301 => 1.185541,
        324310 => 1.186166,
        324500 => 0.78475,
        324900 => 0.584792,
        333000 => 0.618,
        333001 => 0.617917,
        333002 => 0.651208,
        333310 => 0.819917,
        333500 => 0.617417,
        333900 => 0.484625,
        334000 => 0.617458,
        334001 => 0.617667,
        334002 => 0.617833,
        334310 => 0.851708,
        334500 => 0.61825,
        334900 => 0.484792,
        353000 => 0.986291,
        353001 => 0.987875,
        353002 => 0.985792,
        353300 => 1.252708,
        353301 => 1.254833,
        353310 => 1.2535,
        353500 => 0.785875,
        353900 => 0.584083,
        354000 => 0.81875,
        354001 => 0.820375,
        354002 => 0.82,
        354300 => 1.254833,
        354301 => 1.252958,
        354310 => 1.254375,
        354500 => 0.787375,
        363000 => 0.46,
        363001 => 0.554833,
        363002 => 0.555583,
        363010 => 0.425125,
        363300 => 0.759166,
        363301 => 0.75675,
        363310 => 0.756,
        363500 => 0.487167,
        363900 => 0.38675,
        364000 => 0.521417,
        364001 => 0.521167,
        364002 => 0.520917,
        364300 => 0.755667,
        364301 => 0.756333,
        364310 => 0.75525,
        364500 => 0.487333,
        364900 => 0.386667,
        383000 => 0.553333,
        383001 => 0.723167,
        383002 => 0.654333,
        383041 => 0.773917,
        383300 => 0.8565,
        383301 => 0.855917,
        383310 => 0.890083,
        383500 => 0.05025,
        383900 => 0.389167,
        384000 => 0.521167,
        384001 => 0.687583,
        384002 => 0.687667,
        384300 => 1.223833,
        384301 => 1.226999,
        384310 => 1.225749,
        384500 => 0.05025,
        384900 => 0.386833,
        423000 => 0.587917,
        423001 => 0.385833,
        423002 => 0.319583,
        423300 => 0.621583,
        423301 => 0.620167,
        423310 => 0.688083,
        423500 => 0.621417,
        423900 => 0.217917,
        503000 => 0.720833,
        503001 => 0.721666,
        503002 => 0.720667,
        503300 => 0.754917,
        503301 => 0.7555,
        503310 => 0.55325,
        503500 => 0.622083,
        503600 => 0.9,
        503900 => 0.4865,
        504000 => 0.720833,
        504001 => 0.75525,
        504002 => 0.723083,
        504300 => 0.755,
        504301 => 0.755083,
        504310 => 0.587833,
        504600 => 1.0,
        504900 => 0.319083,
        513000 => 0.717354,
        513001 => 0.718188,
        513002 => 0.717896,
        513300 => 1.117979,
        513301 => 1.119812,
        513310 => 0.817563,
        513900 => 0.485,
        514000 => 0.717646,
        514001 => 0.750771,
        514002 => 0.717375,
        514300 => 1.017729,
        514301 => 1.018083,
        514310 => 0.8175,
        514900 => 0.483771,
        533300 => 0.578,
        533301 => 0.590938,
        533310 => 0.646,
        534300 => 0.578,
        534310 => 0.51,
        534900 => 2.312,
        543310 => 0.51,
        544300 => 0.68,
        544310 => 0.51,
        553300 => 0.646,
        553310 => 0.442,
        554300 => 0.646,
        554310 => 0.476,
        563000 => 0.450438,
        563001 => 0.417438,
        563002 => 0.450354,
        563300 => 0.750979,
        563301 => 0.751396,
        563310 => 0.752083,
        563500 => 0.484313,
        563900 => 0.384104,
        564000 => 0.351542,
        564001 => 0.317813,
        564002 => 0.351479,
        564300 => 0.750917,
        564301 => 0.752938,
        564310 => 0.785917,
        564500 => 0.484729,
        564900 => 0.417354,
        573300 => 0.68,
        573310 => 0.612,
        574300 => 0.68,
        574310 => 0.51,
        583300 => 0.577333,
        583310 => 0.646,
        584300 => 1.122,
        584315 => 1.123333,
        584900 => 2.32,
        593300 => 0.920083,
        593301 => 0.918125,
        593310 => 0.951291,
        594300 => 0.918291,
        594301 => 0.918541,
        594310 => 0.95125,
        603300 => 0.818416,
        603301 => 0.818125,
        603310 => 0.717792,
        604300 => 0.717792,
        604301 => 0.727375,
        604310 => 0.685,
        613300 => 1.12125,
        613301 => 1.118208,
        613310 => 1.118666,
        614300 => 0.985125,
        614301 => 0.992625,
        614310 => 0.984833,
        623300 => 1.252708,
        623301 => 1.262916,
        623310 => 1.253583,
        633300 => 0.892917,
        633301 => 0.89125,
        633310 => 0.6885,
        634300 => 0.757833,
        634301 => 0.757083,
        634310 => 0.856917,
        643300 => 1.832082,
        643301 => 1.831165,
        643310 => 1.832415,
        644300 => 1.831665,
        644301 => 1.830375,
        644310 => 1.832749,
        653300 => 0.790083,
        653301 => 0.790083,
        653310 => 0.789583,
        663300 => 1.05875,
        663301 => 1.05875,
        663310 => 1.025583,
        664300 => 0.788917,
        664301 => 0.790333,
        664310 => 0.790083,
        673300 => 1.0925,
        673301 => 1.09225,
        673310 => 1.091666,
        673500 => 1.026167,
        674300 => 1.0245,
        674301 => 1.025,
        674310 => 1.025583,
        674500 => 1.058416,
        683300 => 1.157833,
        683301 => 1.16025,
        683310 => 1.161583,
        684300 => 0.82225,
        684301 => 0.822333,
        684310 => 1.628832,
        703300 => 1.933082,
        703301 => 1.919999,
        703310 => 1.917999,
        704300 => 2.23,
        723300 => 0.529,
        723301 => 0.524437,
        723310 => 0.461,
        724300 => 0.584,
        724310 => 0.426,
        733300 => 0.442,
        733310 => 0.85,
        734300 => 0.544,
        734310 => 0.681333,
        743300 => 0.752,
        743310 => 0.792,
        744300 => 0.732,
        744310 => 0.896,
        744900 => 0.4,
        753300 => 0.764,
        753310 => 0.728,
        754300 => 0.716,
        754310 => 0.728667,
        773300 => 0.792,
        773310 => 0.588,
        783300 => 1.931999,
        783301 => 1.91475,
        784300 => 2.095999,
        793300 => 1.12,
        793305 => 1.12,
        794300 => 1.26,
        794305 => 1.264,
        803300 => 1.715999,
        804300 => 1.691999,
        863300 => 0.788167,
        863301 => 0.789333,
        863310 => 0.51975,
        863900 => 0.486917,
        873300 => 1.829082,
        873301 => 1.827832,
        873310 => 1.827748,
        893300 => 0.683979,
        893301 => 0.684542,
        893310 => 0.686083,
        894300 => 1.085,
        894301 => 1.085646,
        894310 => 1.084333,
        903300 => 1.351666,
        903301 => 1.351458,
        903310 => 1.354187,
        904300 => 1.452396,
        904301 => 1.451958,
        904310 => 1.451146,
        953300 => 1.056,
        953310 => 1.056,
        954300 => 1.056,
        954310 => 1.056,
        963300 => 1.896001,
        963301 => 1.897438,
        964301 => 1.851072,
        964310 => 1.85053,
        973300 => 1.651999,
        973301 => 1.653063,
        974300 => 1.651999,
        983300 => 0.917354,
        983301 => 0.917646,
        983310 => 0.917979,
        984300 => 0.917458,
        984301 => 0.919396,
        984310 => 0.91725,
        993300 => 0.550521,
        993301 => 0.550896,
        993310 => 0.517813,
        994300 => 0.550646,
        994301 => 0.5505,
        994310 => 0.517833,
        1003300 => 1.218375,
        1003301 => 1.20175,
        1003310 => 2.186249,
        1004300 => 1.218166,
        1004301 => 1.21825,
        1004310 => 1.985687,
        1013300 => 1.218083,
        1013301 => 1.219812,
        1013310 => 1.518166,
        1014300 => 1.151396,
        1014301 => 1.151188,
        1014310 => 1.618812,
        1023000 => 0.3835,
        1023001 => 0.283417,
        1023002 => 0.383583,
        1023300 => 0.617292,
        1023301 => 0.617167,
        1023310 => 0.617292,
        1023340 => 0.700625,
        1023341 => 0.7005,
        1023350 => 0.700625,
        1024000 => 0.383833,
        1024001 => 0.317208,
        1024002 => 0.383667,
        1024300 => 0.616917,
        1024301 => 0.618,
        1024310 => 0.616917,
        1024340 => 0.700417,
        1024341 => 0.701333,
        1024350 => 0.700333,
        1033300 => 0.817833,
        1033301 => 0.819167,
        1033310 => 0.818167,
        1034300 => 1.085208,
        1034301 => 1.085333,
        1034310 => 1.552999,
        1043300 => 1.05225,
        1043301 => 1.051291,
        1043310 => 1.051541,
        1044300 => 0.986125,
        1044301 => 0.979,
        1044310 => 0.985,
        1053300 => 1.286124,
        1053301 => 1.286541,
        1053310 => 0.717875,
        1054300 => 1.553624,
        1054301 => 1.552916,
        1054310 => 1.551999,
        1064300 => 1.392374,
        1064301 => 1.386666,
        1064310 => 1.386541,
        1073000 => 0.684542,
        1073001 => 0.650917,
        1073002 => 0.684667,
        1073300 => 1.620291,
        1073301 => 1.618957,
        1073310 => 1.619291,
        1074000 => 0.517334,
        1074001 => 0.617667,
        1074002 => 0.5175,
        1074300 => 1.752916,
        1074301 => 1.752291,
        1074310 => 1.753708,
        1083000 => 0.55425,
        1083001 => 0.55525,
        1083002 => 0.554417,
        1084000 => 0.553583,
        1084001 => 0.554333,
        1084002 => 0.554833,
        1093000 => 0.722333,
        1093001 => 0.78975,
        1093002 => 0.788583,
        1094000 => 0.790166,
        1094001 => 0.7895,
        1094002 => 0.78975,
        1103300 => 1.091916,
        1103301 => 1.091166,
        1103310 => 1.097083,
        1104300 => 1.092,
        1104301 => 1.090833,
        1104310 => 1.0925,
        1123300 => 1.395749,
        1123301 => 1.392749,
        1123310 => 1.392166,
        1124300 => 1.190583,
        1124301 => 1.18375,
        1124310 => 1.194,
        1133300 => 0.617,
        1133301 => 0.61725,
        1133310 => 0.583917,
        1134300 => 0.583792,
        1134301 => 0.583959,
        1134310 => 0.584458,
        1143300 => 0.817625,
        1143301 => 0.817167,
        1143310 => 0.617417,
        1144300 => 0.850833,
        1144301 => 0.850875,
        1144310 => 0.717375,
        1153300 => 1.017375,
        1153301 => 1.018041,
        1153310 => 0.917583,
        1154300 => 0.817583,
        1154301 => 0.817208,
        1154310 => 1.051,
        1163000 => 0.717688,
        1163001 => 0.718,
        1163002 => 0.717667,
        1163300 => 0.917688,
        1163301 => 0.9185,
        1163310 => 0.917729,
        1163900 => 0.484021,
        1164000 => 0.717604,
        1164001 => 0.751021,
        1164002 => 0.717271,
        1164300 => 0.851292,
        1164301 => 0.852417,
        1164310 => 0.850875,
        1164900 => 0.483667,
        1183000 => 0.618708,
        1183001 => 0.617333,
        1183002 => 0.617833,
        1183040 => 0.70225,
        1183041 => 0.70075,
        1183042 => 0.701375,
        1183300 => 0.81825,
        1183301 => 0.818208,
        1183310 => 0.851583,
        1183500 => 0.617417,
        1183540 => 0.700833,
        1183900 => 0.484167,
        1184000 => 0.617708,
        1184001 => 0.617708,
        1184002 => 0.617625,
        1184040 => 0.70125,
        1184041 => 0.701292,
        1184042 => 0.701042,
        1184300 => 0.817875,
        1184301 => 0.817917,
        1184310 => 0.751292,
        1184500 => 0.617542,
        1184900 => 0.484208,
        1193300 => 0.583896,
        1193301 => 0.584604,
        1193310 => 0.584229,
        1194300 => 0.750896,
        1194301 => 0.751146,
        1194310 => 0.750729,
        1203300 => 0.699,
        1243300 => 1.052083,
        1243301 => 1.051625,
        1243310 => 0.685208,
        1244300 => 1.254166,
        1244301 => 1.249875,
        1244310 => 1.25325,
        1253300 => 1.185333,
        1253301 => 1.186166,
        1253310 => 1.185125,
        1254300 => 1.085666,
        1254301 => 1.085041,
        1254310 => 1.0855,
        1283300 => 1.650728,
        1283301 => 1.650437,
        1283310 => 1.652853,
        1284301 => 1.684958,
        1284310 => 1.686708,
        1303000 => 0.306,
        1303001 => 0.238,
        1303002 => 0.306,
        1303300 => 0.578,
        1303310 => 0.578,
        1303500 => 0.51,
        1303900 => 1.598001,
        1304000 => 0.306,
        1304001 => 0.238,
        1304002 => 0.306,
        1304300 => 0.748,
        1304310 => 0.748,
        1304500 => 0.51,
        1304900 => 1.598001,
        1314300 => 1.627999,
        1323000 => 0.450979,
        1323001 => 0.41725,
        1323002 => 0.451229,
        1323300 => 1.18475,
        1323301 => 1.184729,
        1323310 => 1.452146,
        1323500 => 0.484,
        1323900 => 0.383583,
        1324000 => 0.350333,
        1324001 => 0.317208,
        1324002 => 0.350854,
        1324301 => 1.485104,
        1324310 => 1.651958,
        1324500 => 0.483792,
        1324900 => 0.416979,
        1333300 => 1.084958,
        1333301 => 1.084875,
        1333310 => 1.085333,
        1334300 => 1.152416,
        1334301 => 1.15225,
        1344300 => 0.788833,
        1344301 => 0.790667,
        1344310 => 0.79,
        1354300 => 1.791999,
        _ => {
            guiPrint!("{},4:ALERT: {} animation id not found", LocationDetection, animation_id);
            0.21
        }
    }
}